/**
 * Mule Freshbooks Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.modules.freshbooks;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.log4j.Logger;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.freshbooks.api.DefaultFreshbooksClient;
import org.mule.modules.freshbooks.api.FreshbooksClient;
import org.mule.modules.freshbooks.model.Callback;
import org.mule.modules.freshbooks.model.CallbackRequest;
import org.mule.modules.freshbooks.model.Category;
import org.mule.modules.freshbooks.model.CategoryRequest;
import org.mule.modules.freshbooks.model.Client;
import org.mule.modules.freshbooks.model.ClientRequest;
import org.mule.modules.freshbooks.model.EntityType;
import org.mule.modules.freshbooks.model.Invoice;
import org.mule.modules.freshbooks.model.InvoiceStatusEnum;
import org.mule.modules.freshbooks.model.WCallback;
import org.mule.modules.freshbooks.model.WCallbackRequest;
import org.mule.modules.freshbooks.model.WCategory;
import org.mule.modules.freshbooks.model.WCategoryRequest;
import org.mule.modules.freshbooks.model.WClient;
import org.mule.modules.freshbooks.model.WClientRequest;
import org.mule.modules.utils.mom.JaxbMapObjectMappers;

import com.zauberlabs.commons.mom.MapObjectMapper;

/**
 *
 * FreshBooks
 *
 * @author Emiliano Lesende
 *
 */
@Module(name = "freshbooks", schemaVersion= "1.0")
public class FreshbooksModule {
    private static final Logger LOGGER = Logger.getLogger(FreshbooksModule.class);

    private final MapObjectMapper mom = JaxbMapObjectMappers.defaultWithPackage("org.mule.modules.freshbooks.model").build();
    
    /**
     * Authentication Token
     */
    @Configurable
    private String authenticationToken;

    /**
     * Api URL
     */
    @Configurable
    private String apiUrl;

    private FreshbooksClient freshbooksClient;

    public String getAuthenticationToken() {
        return authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
        this.authenticationToken = authenticationToken;
    }

    public String getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
    }
    
    /**
     * Create a new callback for a specific event or a set of events.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-callback}
     *
     * <p>Valid events</p>
     * <p> * all</p>
     * <p> * category</p>
     * <p> * category.create</p>
     * <p> * category.delete</p>
     * <p> * category.update</p>
     * <p> * client</p>
     * <p> * client.create</p>
     * <p> * client.delete</p>
     * <p> * client.update</p>
     * <p> * estimate</p>
     * <p> * estimate.create</p>
     * <p> * estimate.delete</p>
     * <p> * estimate.sendByEmail</p>
     * <p> * estimate.update</p>
     * <p> * expense</p>
     * <p> * expense.create</p>
     * <p> * expense.delete</p>
     * <p> * expense.update</p>
     * <p> * invoice</p>
     * <p> * invoice.create</p>
     * <p> * invoice.delete</p>
     * <p> * invoice.dispute</p>
     * <p> * invoice.pastdue.1</p>
     * <p> * invoice.pastdue.2</p>
     * <p> * invoice.pastdue.3</p>
     * <p> * invoice.sendByEmail</p>
     * <p> * invoice.sendBySnailMail</p>
     * <p> * invoice.update</p>
     * <p> * item</p>
     * <p> * item.create</p>
     * <p> * item.delete</p>
     * <p> * item.update</p>
     * <p> * payment</p>
     * <p> * payment.create</p>
     * <p> * payment.delete</p>
     * <p> * payment.update</p>
     * <p> * project</p>
     * <p> * project.create</p>
     * <p> * project.delete</p>
     * <p> * project.update</p>
     * <p> * recurring</p>
     * <p> * recurring.create</p>
     * <p> * recurring.delete</p>
     * <p> * recurring.update</p>
     * <p> * staff</p>
     * <p> * staff.create</p>
     * <p> * staff.delete</p>
     * <p> * staff.update</p>
     * <p> * task</p>
     * <p> * task.create</p>
     * <p> * task.delete</p>
     * <p> * task.update</p>
     * <p> * time_entry</p>
     * <p> * time_entry.create</p>
     * <p> * time_entry.delete</p>
     * <p> * time_entry.update</p>
     * @param wCallback wrapper of a {@link Callback}
     * @return callback id
     */
    @Processor
    public String createCallback(@Optional @Default("#[payload]") WCallback wCallback)
    {
        return freshbooksClient.create(EntityType.CALLBACK, wCallback.getCallback());
    }
    
    /**
     * Return a list of registered callbacks. You can optionally filter by event or uri.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-callbacks}
     * 
     * @param wCallbackRequest wrapper of a {@link CallbackRequest}
     * @return iterable of callbacks
     */
    @Processor
    public Iterable<Callback> listCallbacks(@Optional @Default("#[payload]") WCallbackRequest wCallbackRequest)
    {
        return freshbooksClient.list(EntityType.CALLBACK, wCallbackRequest.getCallbackRequest());
    }

    /**
     * Deletes a callback.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-callback}
     * 
     * @param wCallback wrapper of a {@link Callback}
     * @param wCallback
     */
    @Processor
    public void deleteCallback(@Optional @Default("#[payload]") WCallback wCallback)
    {
        freshbooksClient.delete(EntityType.CALLBACK, wCallback.getCallback().getId());
    }
    
    /**
     * Create a new category. If successful, returns the category id of the newly created item.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-category}
     * 
     * @param wCategory wrapper of a {@link Category}
     * @return The category id
     */
    @Processor
    public String createCategory(@Optional @Default("#[payload]") WCategory wCategory) {
        return freshbooksClient.create(EntityType.CATEGORY, wCategory.getCategory());
    }

    /**
     * Update an existing expense category with the given category_id. Any category fields left out of the request will remain unchanged.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-category}
     *
     * @param wCategory wrapper of a {@link Category}
     * @param name       New name
     */
    @Processor
    public void updateCategory(@Optional @Default("#[payload]") WCategory wCategory) {
        freshbooksClient.update(EntityType.CATEGORY, wCategory.getCategory());
    }

    /**
     * Return the complete category details associated with the given category_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-category}
     *
     * @param wCategory wrapper of a {@link Category}
     * @return A {@link Category} object
     */
    @Processor
    public Category getCategory(@Optional @Default("#[payload]") WCategory wCategory) {
        return (Category) freshbooksClient.get(EntityType.CATEGORY, wCategory.getCategory().getId());
    }

    /**
     * Delete an existing expense category.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-category}
     *
     * @param wCategory wrapper of a {@link Category}
     */
    @Processor
    public void deleteCategory(@Optional @Default("#[payload]") WCategory wCategory) {
        freshbooksClient.delete(EntityType.CATEGORY, wCategory.getCategory().getId());
    }

    /**
     * Returns a list of expense categories.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-categories}
     *
     * @param wCategoryRequest wrapper of a {@link CategoryRequest}
     * @return A iterable of categories
     * @throws FreshbooksException
     */
    @Processor
    public Iterable<Category> listCategories(@Optional @Default("#[payload]") WCategoryRequest wCategoryRequest) {
        return freshbooksClient.<Category>list(EntityType.CATEGORY, wCategoryRequest.getCategoryRequest());
    }

    /**
     * Create a new client and return the corresponding client_id. If a password is not supplied, one will be created at random.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-client}
     *
     * @param wClient wrapper of a {@link Client}
     * @return The id of the new client
     * @throws FreshbooksException
     */
    @Processor
    public String createClient(@Optional @Default("#[payload]") WClient wClient) {
        return freshbooksClient.create(EntityType.CLIENT, wClient.getClient());
    }

    /**
     * Update the details of the client with the given client_id. Any fields not referenced in the request will remain unchanged.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-client}
     * @param wClient wrapper of a {@link Client}
     * @return The id of the new client
     * @throws FreshbooksException
     */
    @Processor
    public void updateClient(@Optional @Default("#[payload]") WClient wClient) {
        freshbooksClient.update(EntityType.CLIENT, wClient.getClient());
    }

    /**
     * Return the client details associated with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-client}
     * 
     * @param wClient wrapper of a {@link Client}
     * @return A {@link Client}
     * @throws FreshbooksException
     */
    @Processor
    public Client getClient(@Optional @Default("#[payload]") WClient wClient) {
        return (Client) freshbooksClient.get(EntityType.CLIENT, wClient.getClient().getId());
    }

    /**
     * Delete the client with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-client}
     * @param wClient wrapper of a {@link Client}
     * @throws FreshbooksException
     */
    @Processor
    public void deleteClient(@Optional @Default("#[payload]") WClient wClient) 
    {
        freshbooksClient.delete(EntityType.CLIENT, wClient.getClient().getId());
    }

    /**
     * Returns a list of client summaries in order of descending client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-clients}
     * @param wClientRequest wrapper of a {@link ClientRequest}
     * @return A list of clients
     * @throws FreshbooksException
     */
    @Processor
    public Iterable<Client> listClients(@Optional @Default("#[payload]") WClientRequest wClientRequest) 
    {
        return freshbooksClient.<Client>list(EntityType.CLIENT, wClientRequest.getClientRequest());
    }

    /**
     * <p>Create a new invoice complete with line items. If successful, returns 
     * the invoice_id of the newly created invoice.</p>
     * <p>
     *  * If you don't specify an invoice number, it will increment from the last one.<br/>
     *  * You may optionally specify a different address on the invoice; otherwise the 
     *  address will be pulled from your client's details.<br/>
     *  * You may optionally specify a return_uri element. If provided, users will be 
     *  presented with a link to the URI when they pay the invoice.</p>
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-invoice}
     * 
     * @return The invoiceId.
     * @throws FreshbooksException
     */
    @Processor
    public String createInvoice(String clientId,
                                @Optional List<Map<String, Object>> contacts,
                                @Optional String number,
                                @Optional InvoiceStatusEnum status,
                                @Optional String date,
                                @Optional String poNumber,
                                @Optional Double discount,
                                @Optional String notes,
                                @Optional String currencyCode,
                                @Optional String terms,
                                @Optional String returnUri,
                                @Optional String firstName,
                                @Optional String lastName,
                                @Optional String organization,
                                @Optional String primaryStreet1,
                                @Optional String primaryStreet2,
                                @Optional String primaryCity,
                                @Optional String primaryState,
                                @Optional String primaryCountry,
                                @Optional String primaryZipCode,
                                @Optional String language,
                                @Optional String vatName,
                                @Optional String vatNumber,
                                @Optional List<Map<String, Object>> lines
                                )
    {
        Invoice invoice = (Invoice) mom.unmap(new MapBuilder()
                .with("clientId", clientId)
                .with("contacts", contacts)
                .with("number", number)
                .with("status", status)
                .with("date", date)
                .with("poNumber", poNumber)
                .with("discount", BigDecimal.valueOf(discount))
                .with("notes", notes)
                .with("currencyCode", currencyCode)
                .with("terms", terms)
                .with("returnUri", returnUri)
                .with("firstName", firstName)
                .with("lastName", lastName)
                .with("organization", organization)
                .with("street1", primaryStreet1)
                .with("street2", primaryStreet2)
                .with("city", primaryCity)
                .with("state", primaryState)
                .with("country", primaryCountry)
                .with("code", primaryZipCode)
                .with("language", language)
                .with("vatName", vatName)
                .with("vatNumber", vatNumber)
                .with("lines", lines)
                .build()
             , Invoice.class);

        return freshbooksClient.create(EntityType.INVOICE, invoice);
    }
    
    /**
     * <p>Update an existing invoice with the given invoice_id. Any invoice fields left 
     * out of the request will remain unchanged.</p>
     * <p> * If you do not specify a lines element, the existing lines will remain unchanged. 
     * If you do specify lines elements the original ones will be replaced by the new ones.</p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-invoice}
     * 
     * @param invoiceId        Invoice to update.
     * @param clientId         Client being invoiced.
     * @param contacts         List of Contact.
     * @param number           Number.
     * @param status           Status. One of sent, viewed or draft. Defaults to draft.
     * @param date             Date. If not supplied, defaults to today's date.
     * @param poNumber         PO Number.
     * @param discount         Percent Discount.
     * @param notes            Notes.
     * @param currencyCode     Currency Code. Defaults to your base currency.
     * @param terms            Terms.
     * @param returnUri        Return URI.
     * @param firstName        First Name.
     * @param lastName         Last Name.
     * @param organization     Organization.
     * @param primaryStreet1   Primary street address.
     * @param primaryStreet2   Primary street address 2.
     * @param primaryCity      Primary city.
     * @param primaryState     Primary state.
     * @param primaryCountry   Primary country.
     * @param primaryZipCode   Primary zip code.
     * @param language         Language code, defaults to the client's language.
     * @param vatName          VAT Name. If set, shown with vat_name under client address.
     * @param vatNumber        VatNumber.
     * @param lines            List of Line. Specify one or more line elements.
     * @throws FreshbooksException
     */
    @Processor 
    public void updateInvoice(String invoiceId,
                              String clientId,
                              @Optional List<Map<String, Object>> contacts,
                              @Optional String number,
                              @Optional InvoiceStatusEnum status,
                              @Optional String date,
                              @Optional String poNumber,
                              @Optional Double discount,
                              @Optional String notes,
                              @Optional String currencyCode,
                              @Optional String terms,
                              @Optional String returnUri,
                              @Optional String firstName,
                              @Optional String lastName,
                              @Optional String organization,
                              @Optional String primaryStreet1,
                              @Optional String primaryStreet2,
                              @Optional String primaryCity,
                              @Optional String primaryState,
                              @Optional String primaryCountry,
                              @Optional String primaryZipCode,
                              @Optional String language,
                              @Optional String vatName,
                              @Optional String vatNumber,
                              @Optional List<Map<String, Object>> lines)
    {
        Invoice invoice = (Invoice) mom.unmap(new MapBuilder()
                .with("id", invoiceId)
                .with("clientId", clientId)
                .with("contacts", contacts)
                .with("number", number)
                .with("status", status)
                .with("date", date)
                .with("poNumber", poNumber)
                .with("discount", BigDecimal.valueOf(discount))
                .with("notes", notes)
                .with("currencyCode", currencyCode)
                .with("terms", terms)
                .with("returnUri", returnUri)
                .with("firstName", firstName)
                .with("lastName", lastName)
                .with("organization", organization)
                .with("street1", primaryStreet1)
                .with("street2", primaryStreet2)
                .with("city", primaryCity)
                .with("state", primaryState)
                .with("country", primaryCountry)
                .with("code", primaryZipCode)
                .with("language", language)
                .with("vatName", vatName)
                .with("vatNumber", vatNumber)
                .with("lines", lines)
                .build()
             , Invoice.class);
        
        freshbooksClient.update(EntityType.INVOICE, invoice);
    }
    
    /**
     * <p>Return the complete invoice details associated with the given invoice_id.</p>
     * <p> * You can use the links element to provide your customers with direct links to 
     * the invoice for editing, viewing by the client and viewing by an administrator.</p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-invoice}
     * 
     * @param invoiceId Id of the Invoice to be retrieved.
     * @return The invoice retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Invoice getInvoice(String invoiceId)
    {
        return (Invoice) freshbooksClient.get(EntityType.INVOICE, invoiceId);
    }
    
    /**
     * Delete an existing invoice.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-invoice}
     * 
     * @param invoiceId Id of the Invoice to be deleted
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteInvoice(String invoiceId)
    {
        freshbooksClient.delete(EntityType.INVOICE, invoiceId);
    }
    
    /**
     * Returns a list of invoice summaries. Results are ordered by descending invoice_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-invoices}
     * 
     * @return A iterable of Invoices
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Invoice> listInvoices()
    {
        return freshbooksClient.<Invoice>list(EntityType.INVOICE);
    }
    
    @PostConstruct
    public void init()
    {
        if (freshbooksClient == null )
        {
            freshbooksClient = new DefaultFreshbooksClient(apiUrl, authenticationToken);
        }
    }
}
