/**
 * Mule Freshbooks Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.modules.freshbooks;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.transform.sax.SAXSource;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.log4j.Logger;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.freshbooks.model.Categories;
import org.mule.modules.freshbooks.model.Category;
import org.mule.modules.freshbooks.model.Client;
import org.mule.modules.freshbooks.model.Clients;
import org.mule.modules.freshbooks.model.Request;
import org.mule.modules.freshbooks.model.Response;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLFilterImpl;

/**
 *
 * FreshBooks
 *
 * @author Emiliano Lesende
 *
 */
@Module(name = "freshbooks", schemaVersion= "1.0")
public class FreshbooksModule {
    private static final Logger LOGGER = Logger.getLogger(FreshbooksModule.class);

    /**
     * Authentication Token
     */
    @Configurable
    private String authenticationToken;

    /**
     * Api URL
     */
    @Configurable
    private URL apiUrl;

    private transient HttpClient client;

    public String getAuthenticationToken() {
        return authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
        this.authenticationToken = authenticationToken;
    }

    public URL getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(URL apiUrl) {
        this.apiUrl = apiUrl;
    }

    private HttpClient getClient() {
        if (client == null) {
            client = new HttpClient();
            client.getParams().setAuthenticationPreemptive(true);
            client.getState().setCredentials(new AuthScope(apiUrl.getHost(), 443, AuthScope.ANY_REALM), new UsernamePasswordCredentials(authenticationToken, ""));
        }
        return client;
    }

    private Response sendRequest(Request request) throws FreshbooksException {
        try {
            String requestString = marshalRequest(request);

            PostMethod method = new PostMethod(apiUrl.toString());
            try {
                method.setContentChunked(false);
                method.setDoAuthentication(true);
                method.setFollowRedirects(false);
                method.setRequestEntity(new StringRequestEntity(requestString, "text/xml", "utf-8"));
                method.getParams().setContentCharset("utf-8");

                getClient().executeMethod(method);
                InputStream is = method.getResponseBodyAsStream();
                Response response = unmarshalResponse(is);
                if (!"ok".equals(response.getStatus())) {
                    throw new FreshbooksException(response.getError());
                }
                return response;
            } catch (HttpException e) {
                LOGGER.error(e.getMessage());
                throw new FreshbooksException(e);
            } catch (UnsupportedEncodingException e) {
                LOGGER.error(e.getMessage());
                throw new FreshbooksException(e);
            } catch (IOException e) {
                LOGGER.error(e.getMessage());
                throw new FreshbooksException(e);
            } catch (SAXException e) {
                LOGGER.error(e.getMessage());
                throw new FreshbooksException(e);
            } catch (ParserConfigurationException e) {
                LOGGER.error(e.getMessage());
                throw new FreshbooksException(e);
            } finally {
                method.releaseConnection();
            }
        } catch (JAXBException e) {
            LOGGER.error(e.getMessage());
            throw new FreshbooksException(e);
        }
    }

    private Response unmarshalResponse(InputStream is) throws JAXBException, SAXException, ParserConfigurationException {
        JAXBContext jc = JAXBContext.newInstance(Response.class);
        Unmarshaller unmarshaller = jc.createUnmarshaller();

        // Create the XMLReader
        SAXParserFactory factory = SAXParserFactory.newInstance();
        XMLReader reader = factory.newSAXParser().getXMLReader();

        // The filter class to set the correct namespace
        XMLFilterImpl xmlFilter = new XMLNamespaceFilter(reader);
        reader.setContentHandler(unmarshaller.getUnmarshallerHandler());
        SAXSource source = new SAXSource(xmlFilter, new InputSource(is));

        return (Response) unmarshaller.unmarshal(source);
    }

    private String marshalRequest(Request request) throws JAXBException {
        JAXBContext jc = JAXBContext.newInstance(Request.class);
        Marshaller marshaller = jc.createMarshaller();
        OutputStream requestStream = new OutputStream() {
            private final StringBuilder string = new StringBuilder();

            @Override
            public void write(int b) throws IOException {
                this.string.append((char) b);
            }

            //Netbeans IDE automatically overrides this toString()
            @Override
            public String toString() {
                return this.string.toString();
            }
        };

        marshaller.marshal(request, requestStream);
        return requestStream.toString();
    }

    /**
     * Create a new category. If successful, returns the category id of the newly created item.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-category}
     * 
     * @param name The name of the category
     * @return The category id
     */
    @Processor
    public String createCategory(String name) throws FreshbooksException {
        Category cat = new Category();
        Request req = new Request();
        req.setCategory(cat);
        req.setMethod("category.create");
        cat.setName(name);

        return sendRequest(req).getCategoryId();
    }

    /**
     * Update an existing expense category with the given category_id. Any category fields left out of the request will remain unchanged.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-category}
     *
     * @param categoryId ID of the category to update
     * @param name       New name
     */
    @Processor
    public void updateCategory(int categoryId, String name) throws FreshbooksException {
        Category cat = new Category();
        Request req = new Request();
        req.setCategory(cat);
        req.setMethod("category.update");
        cat.setName(name);
        cat.setId(Integer.toString(categoryId));

        sendRequest(req);
    }

    /**
     * Return the complete category details associated with the given category_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-category}
     *
     * @param categoryId The Id of the category to retrieve
     * @return A {@link Category} object
     */
    @Processor
    public Category getCategory(int categoryId) throws FreshbooksException {
        Request req = new Request();
        req.setMethod("category.get");
        req.setCategoryId(Integer.toString(categoryId));

        return sendRequest(req).getCategory();
    }

    /**
     * Delete an existing expense category.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-category}
     *
     * @param categoryId The Id of the category to delete
     */
    @Processor
    public void deleteCategory(int categoryId) throws FreshbooksException {
        Request req = new Request();
        req.setMethod("category.delete");
        req.setCategoryId(Integer.toString(categoryId));

        sendRequest(req);
    }

    /**
     * Returns a list of expense categories.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-categories}
     *
     * @return A list of categories
     * @throws FreshbooksException
     */
    @Processor
    public Categories listCategories() throws FreshbooksException {
        Request req = new Request();
        req.setMethod("category.list");

        return sendRequest(req).getCategories();
    }

    /**
     * Create a new client and return the corresponding client_id. If a password is not supplied, one will be created at random.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-client}
     *
     * @param firstName        First name
     * @param lastName         Last name
     * @param organization     Organization
     * @param email            Email
     * @param username         Username
     * @param password         Password. Defaults to random password.
     * @param workPhone        Work phone
     * @param homePhone        Home phone
     * @param mobile           Mobile
     * @param fax              Fax
     * @param language         Language
     * @param currencyCode     Currency code
     * @param notes            Notes
     * @param primaryStreet1   Primary street address
     * @param primaryStreet2   Primary street address 2
     * @param primaryCity      Primary city
     * @param primaryState     Primary state
     * @param primaryCountry   Primary country
     * @param primaryZipCode   Primary zip code
     * @param secondaryStreet1 Secondary street address
     * @param secondaryStreet2 Secondary street address 2
     * @param secondaryCity    Secondary city
     * @param secondaryState   Secondary state
     * @param secondaryCountry Secondary country
     * @param secondaryZipCode Secondary zip code
     * @param vatName          VAT name
     * @param vatNumber        VAT number
     * @return The id of the new client
     * @throws FreshbooksException
     */
    @Processor
    public String createClient(String firstName, 
                               String lastName, 
                               String organization,
                               String email, 
                               @Optional String username,
                               @Optional String password,
                               @Optional String workPhone,
                               @Optional String homePhone,
                               @Optional String mobile,
                               @Optional String fax,
                               @Optional @Default("en") String language,
                               @Optional String currencyCode,
                               @Optional String notes,
                               @Optional String primaryStreet1,
                               @Optional String primaryStreet2,
                               @Optional String primaryCity,
                               @Optional String primaryState,
                               @Optional String primaryCountry,
                               @Optional String primaryZipCode,
                               @Optional String secondaryStreet1,
                               @Optional String secondaryStreet2,
                               @Optional String secondaryCity,
                               @Optional String secondaryState,
                               @Optional String secondaryCountry,
                               @Optional String secondaryZipCode,
                               @Optional String vatName,
                               @Optional String vatNumber) throws FreshbooksException {
        Client cli = new Client();
        Request req = new Request();
        req.setClient(cli);
        req.setMethod("client.create");

        cli.setFirstName(firstName);
        cli.setLastName(lastName);
        cli.setOrganization(organization);
        cli.setEmail(email);
        if (username != null) {
            cli.setUsername(username);
        }
        if (password != null) {
            cli.setPassword(password);
        }
        if (workPhone != null) {
            cli.setWorkPhone(workPhone);
        }
        if (mobile != null) {
            cli.setMobile(mobile);
        }
        if (fax != null) {
            cli.setFax(fax);
        }
        if (homePhone != null) {
            cli.setHomePhone(homePhone);
        }
        if (language != null) {
            cli.setLanguage(language);
        }
        if (currencyCode != null) {
            cli.setCurrencyCode(currencyCode);
        }
        if (notes != null) {
            cli.setNotes(notes);
        }
        if (primaryStreet1 != null) {
            cli.setStreet1(primaryStreet1);
        }
        if (primaryStreet2 != null) {
            cli.setStreet2(primaryStreet2);
        }
        if (primaryCity != null) {
            cli.setCity(primaryCity);
        }
        if (primaryState != null) {
            cli.setState(primaryState);
        }
        if (primaryCountry != null) {
            cli.setCountry(primaryCountry);
        }
        if (primaryZipCode != null) {
            cli.setCode(primaryZipCode);
        }

        if (secondaryStreet1 != null) {
            cli.setSecondaryStreet1(secondaryStreet1);
        }
        if (secondaryStreet2 != null) {
            cli.setSecondaryStreet2(secondaryStreet2);
        }
        if (secondaryCity != null) {
            cli.setSecondaryCity(secondaryCity);
        }
        if (secondaryState != null) {
            cli.setSecondaryState(secondaryState);
        }
        if (secondaryCountry != null) {
            cli.setSecondaryCountry(secondaryCountry);
        }
        if (secondaryZipCode != null) {
            cli.setSecondaryCode(secondaryZipCode);
        }
        if (vatName != null) {
            cli.setVatName(vatName);
        }
        if (vatNumber != null) {
            cli.setVatNumber(vatNumber);
        }

        return sendRequest(req).getClientId();
    }

    /**
     * Update the details of the client with the given client_id. Any fields not referenced in the request will remain unchanged.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-client}
     *
     * @param clientId         Client Id to update
     * @param firstName        First name
     * @param lastName         Last name
     * @param organization     Organization
     * @param email            Email
     * @param username         Username
     * @param password         Password. Defaults to random password.
     * @param workPhone        Work phone
     * @param homePhone        Home phone
     * @param mobile           Mobile
     * @param fax              Fax
     * @param language         Language
     * @param currencyCode     Currency code
     * @param notes            Notes
     * @param primaryStreet1   Primary street address
     * @param primaryStreet2   Primary street address 2
     * @param primaryCity      Primary city
     * @param primaryState     Primary state
     * @param primaryCountry   Primary country
     * @param primaryZipCode   Primary zip code
     * @param secondaryStreet1 Secondary street address
     * @param secondaryStreet2 Secondary street address 2
     * @param secondaryCity    Secondary city
     * @param secondaryState   Secondary state
     * @param secondaryCountry Secondary country
     * @param secondaryZipCode Secondary zip code
     * @param vatName          VAT name
     * @param vatNumber        VAT number
     * @return The id of the new client
     * @throws FreshbooksException
     */
    @Processor
    public void updateClient(Long clientId, 
                             String firstName, 
                             String lastName, 
                             String organization,
                             String email, 
                             @Optional String username,
                             @Optional String password,
                             @Optional String workPhone,
                             @Optional String homePhone,
                             @Optional String mobile,
                             @Optional String fax,
                             @Optional String language,
                             @Optional String currencyCode,
                             @Optional String notes,
                             @Optional String primaryStreet1,
                             @Optional String primaryStreet2,
                             @Optional String primaryCity,
                             @Optional String primaryState,
                             @Optional String primaryCountry,
                             @Optional String primaryZipCode,
                             @Optional String secondaryStreet1,
                             @Optional String secondaryStreet2,
                             @Optional String secondaryCity,
                             @Optional String secondaryState,
                             @Optional String secondaryCountry,
                             @Optional String secondaryZipCode,
                             @Optional String vatName,
                             @Optional String vatNumber) throws FreshbooksException {
        Client cli = new Client();
        Request req = new Request();
        req.setClient(cli);
        req.setMethod("client.update");

        cli.setId(clientId);
        cli.setFirstName(firstName);
        cli.setLastName(lastName);
        cli.setOrganization(organization);
        cli.setEmail(email);
        if (username != null) {
            cli.setUsername(username);
        }
        if (password != null) {
            cli.setPassword(password);
        }
        if (workPhone != null) {
            cli.setWorkPhone(workPhone);
        }
        if (mobile != null) {
            cli.setMobile(mobile);
        }
        if (fax != null) {
            cli.setFax(fax);
        }
        if (homePhone != null) {
            cli.setHomePhone(homePhone);
        }
        if (language != null) {
            cli.setLanguage(language);
        }
        if (currencyCode != null) {
            cli.setCurrencyCode(currencyCode);
        }
        if (notes != null) {
            cli.setNotes(notes);
        }
        if (primaryStreet1 != null) {
            cli.setStreet1(primaryStreet1);
        }
        if (primaryStreet2 != null) {
            cli.setStreet2(primaryStreet2);
        }
        if (primaryCity != null) {
            cli.setCity(primaryCity);
        }
        if (primaryState != null) {
            cli.setState(primaryState);
        }
        if (primaryCountry != null) {
            cli.setCountry(primaryCountry);
        }
        if (primaryZipCode != null) {
            cli.setCode(primaryZipCode);
        }

        if (secondaryStreet1 != null) {
            cli.setSecondaryStreet1(secondaryStreet1);
        }
        if (secondaryStreet2 != null) {
            cli.setSecondaryStreet2(secondaryStreet2);
        }
        if (secondaryCity != null) {
            cli.setSecondaryCity(secondaryCity);
        }
        if (secondaryState != null) {
            cli.setSecondaryState(secondaryState);
        }
        if (secondaryCountry != null) {
            cli.setSecondaryCountry(secondaryCountry);
        }
        if (secondaryZipCode != null) {
            cli.setSecondaryCode(secondaryZipCode);
        }
        if (vatName != null) {
            cli.setVatName(vatName);
        }
        if (vatNumber != null) {
            cli.setVatNumber(vatNumber);
        }

        sendRequest(req);
    }

    /**
     * Return the client details associated with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-client}
     * 
     * @param clientId the id of the client to retrieve
     * @return A {@link Client}
     * @throws FreshbooksException
     */
    @Processor
    public Client getClient(Long clientId) throws FreshbooksException {
        Request req = new Request();
        req.setMethod("client.get");
        req.setClientId(Long.toString(clientId));

        return sendRequest(req).getClient();
    }

    /**
     * Delete the client with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-client}
     *
     * @param clientId the id of the client to retrieve
     * @throws FreshbooksException
     */
    @Processor
    public void deleteClient(Long clientId) throws FreshbooksException {
        Request req = new Request();
        req.setMethod("client.delete");
        req.setClientId(Long.toString(clientId));

        sendRequest(req);
    }

    /**
     * Returns a list of client summaries in order of descending client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-clients}
     *
     * @return A list of clients
     * @throws FreshbooksException
     */
    @Processor
    public Clients listClients() throws FreshbooksException {
        Request req = new Request();
        req.setMethod("client.list");

        return sendRequest(req).getClients();
    }

}
