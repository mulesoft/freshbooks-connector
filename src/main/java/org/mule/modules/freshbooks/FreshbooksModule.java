/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.modules.freshbooks;

import java.util.Map;

import javax.annotation.PostConstruct;

import oauth.signpost.exception.OAuthCommunicationException;
import oauth.signpost.exception.OAuthExpectationFailedException;
import oauth.signpost.exception.OAuthMessageSignerException;
import oauth.signpost.exception.OAuthNotAuthorizedException;

import org.apache.commons.lang.StringUtils;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.param.OutboundHeaders;
import org.mule.api.config.MuleProperties;
import org.mule.api.store.ObjectDoesNotExistException;
import org.mule.api.store.ObjectStore;
import org.mule.api.store.ObjectStoreException;
import org.mule.modules.freshbooks.api.DefaultFreshbooksOAuthClient;
import org.mule.modules.freshbooks.api.FreshbooksAccessTokenException;
import org.mule.modules.freshbooks.api.OAuthCredentials;
import org.mule.modules.freshbooks.api.DefaultFreshbooksClient;
import org.mule.modules.freshbooks.api.FreshbooksClient;
import org.mule.modules.freshbooks.api.ObjectStoreHelper;
import org.mule.modules.freshbooks.model.Addon;
import org.mule.modules.freshbooks.model.AddonRequest;
import org.mule.modules.freshbooks.model.Addons;
import org.mule.modules.freshbooks.model.Callback;
import org.mule.modules.freshbooks.model.CallbackRequest;
import org.mule.modules.freshbooks.model.Category;
import org.mule.modules.freshbooks.model.CategoryRequest;
import org.mule.modules.freshbooks.model.Client;
import org.mule.modules.freshbooks.model.ClientRequest;
import org.mule.modules.freshbooks.model.EntityType;
import org.mule.modules.freshbooks.model.Invoice;
import org.mule.modules.freshbooks.model.InvoiceRequest;
import org.mule.modules.freshbooks.model.Item;
import org.mule.modules.freshbooks.model.ItemRequest;
import org.mule.modules.freshbooks.model.License;
import org.mule.modules.freshbooks.model.LicenseRequest;
import org.mule.modules.freshbooks.model.Licenses;
import org.mule.modules.freshbooks.model.Payment;
import org.mule.modules.freshbooks.model.PaymentRequest;
import org.mule.modules.freshbooks.model.Session;
import org.mule.modules.freshbooks.model.Staff;
import org.mule.modules.freshbooks.model.System;
import org.mule.modules.freshbooks.model.Task;
import org.mule.modules.freshbooks.model.TaskRequest;
import org.mule.modules.freshbooks.model.Tax;
import org.mule.modules.freshbooks.model.TaxRequest;

/**
 *
 * FreshBooks is an online invoicing software as a service for freelancers, small businesses, 
 * agencies, and professionals. It is produced by the software company 2ndSite Inc. which is located in 
 * Toronto, Ontario, Canada. The product includes a myriad of other related features, such as time tracking, 
 * expense tracking, recurring billing, online payment collection, 
 * the ability to mail invoices through the U.S. Post, and support tickets.
 *
 * @author Emiliano Lesende
 *
 */
@Module(name = "freshbooks", schemaVersion= "1.0", friendlyName = "FreshBooks")
@SuppressWarnings("rawtypes")
public class FreshbooksModule {

    private static String DEFAULT_API_URL = "https://%s/api/2.1/xml-in";

    /**
     * Api URL
     */
    @Configurable
    private String apiUrl;
    
    /**
     * API Key
     */
    @Configurable
    private String consumerKey;

    /**
     * API Secret
     */
    @Configurable
    private String consumerSecret;

    /**
     * Object store reference
     */
    @Configurable
    @Optional
    @Default(MuleProperties.DEFAULT_USER_OBJECT_STORE_NAME)
    private ObjectStore objectStore;
    
    /**
     * Object store helper
     */
    private ObjectStoreHelper objectStoreHelper;
    
    private FreshbooksClient freshbooksClient;

    public String getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
    }
    
    /**
     * Connect to a Freshbooks client
     * @param apiUrl API's URL
     * @param consumerKey Consumer Key
     * @param consumerSecret Consumer Secret
     * @throws ConnectionException when the connection process failed
     */
    @PostConstruct
    public void connect() 
            throws ConnectionException {
        setFreshbooksClient(new DefaultFreshbooksClient(apiUrl, consumerKey, consumerSecret));
        setObjectStoreHelper(new ObjectStoreHelper(objectStore));
    }
    
    
    /**
     * Create a new callback for a specific event or a set of events.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-callback}
     *
     * <p>Valid events</p>
     * <p> * all</p>
     * <p> * category</p>
     * <p> * category.create</p>
     * <p> * category.delete</p>
     * <p> * category.update</p>
     * <p> * client</p>
     * <p> * client.create</p>
     * <p> * client.delete</p>
     * <p> * client.update</p>
     * <p> * estimate</p>
     * <p> * estimate.create</p>
     * <p> * estimate.delete</p>
     * <p> * estimate.sendByEmail</p>
     * <p> * estimate.update</p>
     * <p> * expense</p>
     * <p> * expense.create</p>
     * <p> * expense.delete</p>
     * <p> * expense.update</p>
     * <p> * invoice</p>
     * <p> * invoice.create</p>
     * <p> * invoice.delete</p>
     * <p> * invoice.dispute</p>
     * <p> * invoice.pastdue.1</p>
     * <p> * invoice.pastdue.2</p>
     * <p> * invoice.pastdue.3</p>
     * <p> * invoice.sendByEmail</p>
     * <p> * invoice.sendBySnailMail</p>
     * <p> * invoice.update</p>
     * <p> * item</p>
     * <p> * item.create</p>
     * <p> * item.delete</p>
     * <p> * item.update</p>
     * <p> * payment</p>
     * <p> * payment.create</p>
     * <p> * payment.delete</p>
     * <p> * payment.update</p>
     * <p> * project</p>
     * <p> * project.create</p>
     * <p> * project.delete</p>
     * <p> * project.update</p>
     * <p> * recurring</p>
     * <p> * recurring.create</p>
     * <p> * recurring.delete</p>
     * <p> * recurring.update</p>
     * <p> * staff</p>
     * <p> * staff.create</p>
     * <p> * staff.delete</p>
     * <p> * staff.update</p>
     * <p> * task</p>
     * <p> * task.create</p>
     * <p> * task.delete</p>
     * <p> * task.update</p>
     * <p> * time_entry</p>
     * <p> * time_entry.create</p>
     * <p> * time_entry.delete</p>
     * <p> * time_entry.update</p>
     * @param sourceToken source token value
     * @param callback to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return callback id
     */
    @Processor
    public Callback createCallback(@Optional String sourceToken, @Optional @Default("#[payload]") Callback callback, 
            @Optional String accessTokenId)
    {
        String newCallbackId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), sourceToken, 
                EntityType.CALLBACK, callback, true);
        callback.setId(newCallbackId);
        return callback;
    }
    
    /**
     * Return a list of registered callbacks. You can optionally filter by event or uri.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-callbacks}
     * 
     * @param sourceToken source token value
     * @param callbackRequest {@link CallbackRequest} CallbackRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return iterable of callbacks
     */
    @Processor
    public Iterable<Callback> listCallbacks(@Optional String sourceToken, 
            @Optional @Default("#[payload]") CallbackRequest callbackRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CALLBACK, callbackRequest);
    }

    /**
     * Deletes a callback.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-callback}
     * 
     * @param sourceToken source token value
     * @param callback to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @param wCallback
     */
    @Processor
    public void deleteCallback(@Optional String sourceToken, @Optional @Default("#[payload]") Callback callback,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CALLBACK, callback.getId());
    }
    
    /**
     * Verify a callback.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:verify-callback}
     * 
     * @param sourceToken source token value
     * @param callback to be verified
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return verified callback 
     */
    @Processor
    public Callback verifyCallback(@Optional String sourceToken, @Optional @Default("#[payload]") Callback callback,
            @Optional String accessTokenId)
    {
        freshbooksClient.verify(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CALLBACK, callback, true);
        return callback;
    }
    
    /**
     * Create a new category. If successful, returns the category id of the newly created item.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-category}
     * 
     * @param sourceToken source token value
     * @param category to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created category
     */
    @Processor
    public Category createCategory(@Optional String sourceToken, @Optional @Default("#[payload]") Category category,
            @Optional String accessTokenId) {
        String newCategoryId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CATEGORY, category, true);
        category.setId(newCategoryId);
        return category;
    }

    /**
     * Update an existing expense category with the given category_id. Any category fields left out of the request will remain unchanged.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-category}
     *
     * @param sourceToken source token value
     * @param category to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated category
     * 
     */
    @Processor
    public Category updateCategory(@Optional String sourceToken, @Optional @Default("#[payload]") Category category,
            @Optional String accessTokenId) {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CATEGORY, category, true);
        return category;
    }

    /**
     * Return the complete category details associated with the given category_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-category}
     * 
     * @param sourceToken source token value
     * @param categoryId    The category id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A {@link Category} object
     */
    @Processor
    public Category getCategory(@Optional String sourceToken, String categoryId,
            @Optional String accessTokenId) {
        return (Category) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CATEGORY, categoryId);
    }

    /**
     * Delete an existing expense category.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-category}
     *
     * @param sourceToken source token value
     * @param accessTokenId accessTokenIdentifier
     * 
     * @param category to be deleted
     */
    @Processor
    public void deleteCategory(@Optional String sourceToken, @Optional @Default("#[payload]") Category category,
            @Optional String accessTokenId) {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CATEGORY, category.getId());
    }

    /**
     * Returns a list of expense categories.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-categories}
     *
     * @param sourceToken source token value
     * @param categoryRequest {@link CategoryRequest} CategoryRequest Object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of categories
     * @throws FreshbooksException
     */
    @Processor
    public Iterable<Category> listCategories(@Optional String sourceToken, 
            @Optional @Default("#[payload]") CategoryRequest categoryRequest,
            @Optional String accessTokenId) {
        return freshbooksClient.<Category>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CATEGORY, categoryRequest);
    }

    /**
     * Create a new client and return the corresponding client_id. If a password is not supplied, one will be created at random.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-client}
     *
     * @param sourceToken source token value
     * @param client to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created client
     * @throws FreshbooksException
     */
    @Processor
    public Client createClient(@Optional String sourceToken, 
            @Optional @Default("#[payload]") Client client,
            @Optional String accessTokenId) {
        String newClientId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, client, true);
        client.setId(newClientId);
        return client;
    }

    /**
     * Update the details of the client with the given client_id. Any fields not referenced in the request will remain unchanged.
     *
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-client}
     * 
     * @param sourceToken source token value
     * @param client to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated client
     * @throws FreshbooksException
     */
    @Processor
    public Client updateClient(@Optional String sourceToken, @Optional @Default("#[payload]") Client client,
            @Optional String accessTokenId) {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, client, true);
        return client;
    }

    /**
     * Return the client details associated with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-client}
     * 
     * @param sourceToken source token value
     * @param clientId  The client id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A {@link Client}
     * @throws FreshbooksException
     */
    @Processor
    public Client getClient(@Optional String sourceToken, String clientId,
            @Optional String accessTokenId) {
        return (Client) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, clientId);
    }

    /**
     * Delete the client with the given client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-client}
     * 
     * @param sourceToken source token value
     * @param client to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException
     */
    @Processor
    public void deleteClient(@Optional String sourceToken, @Optional @Default("#[payload]") Client client,
            @Optional String accessTokenId) 
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, client.getId());
    }
    
    /**
     * Undelete a client
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:undelete-client}
     * 
     * @param sourceToken source token value
     * @param client to be undeleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return the undeleted client id
     * @throws FreshbooksException
     */
    @Processor
    public String undeleteClient(@Optional String sourceToken, @Optional @Default("#[payload]") Client client,
            @Optional String accessTokenId) 
    {
        freshbooksClient.undelete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, client.getId());
        return client.getId();
    }

    /**
     * Returns a list of client summaries in order of descending client_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-clients}
     * 
     * @param sourceToken source token value
     * @param clientRequest {@link ClientRequest} ClientRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of clients
     * @throws FreshbooksException
     */
    @Processor
    public Iterable<Client> listClients(@Optional String sourceToken, 
            @Optional @Default("#[payload]") ClientRequest clientRequest,
            @Optional String accessTokenId) 
    {
        return freshbooksClient.<Client>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.CLIENT, clientRequest);
    }

    /**
     * <p>Create a new invoice complete with line items. If successful, returns 
     * the invoice_id of the newly created invoice.</p>
     * <p>
     *  * If you don't specify an invoice number, it will increment from the last one.<br/>
     *  * You may optionally specify a different address on the invoice; otherwise the 
     *  address will be pulled from your client's details.<br/>
     *  * You may optionally specify a return_uri element. If provided, users will be 
     *  presented with a link to the URI when they pay the invoice.</p>
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-invoice}
     * 
     * @param sourceToken source token value
     * @param invoice to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created invoice
     * @throws FreshbooksException
     */
    @Processor
    public Invoice createInvoice(@Optional String sourceToken, @Optional @Default("#[payload]") Invoice invoice,
            @Optional String accessTokenId)
    {
        String newInvoiceId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoice, true);
        invoice.setId(newInvoiceId);
        return invoice;
    }
    
    /**
     * <p>Update an existing invoice with the given invoice_id. Any invoice fields left 
     * out of the request will remain unchanged.</p>
     * <p> * If you do not specify a lines element, the existing lines will remain unchanged. 
     * If you do specify lines elements the original ones will be replaced by the new ones.</p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-invoice}
     * 
     * @param sourceToken source token value
     * @param invoice to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated invoice
     * @throws FreshbooksException
     */
    @Processor 
    public Invoice updateInvoice(@Optional String sourceToken, @Optional @Default("#[payload]") Invoice invoice,
            @Optional String accessTokenId)
    {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoice, true);
        return invoice;
    }
    
    /**
     * <p>Return the complete invoice details associated with the given invoice_id.</p>
     * <p> * You can use the links element to provide your customers with direct links to 
     * the invoice for editing, viewing by the client and viewing by an administrator.</p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-invoice}
     * 
     * @param sourceToken source token value
     * @param invoiceId     The invoice id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The invoice retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Invoice getInvoice(@Optional String sourceToken, String invoiceId,
            @Optional String accessTokenId)
    {
        return (Invoice) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoiceId);
    }
    
    /**
     * Delete an existing invoice.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-invoice}
     * 
     * @param sourceToken source token value
     * @param invoice to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteInvoice(@Optional String sourceToken, @Optional @Default("#[payload]") Invoice invoice,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoice.getId());
    }
    
    /**
     * Undelete an invoice
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:undelete-invoice}
     * 
     * @param sourceToken source token value
     * @param invoice to be undeleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The undeleted invoice id
     * @throws FreshbooksException.
     */
    @Processor
    public String undeleteInvoice(@Optional String sourceToken, @Optional @Default("#[payload]") Invoice invoice,
            @Optional String accessTokenId)
    {
        freshbooksClient.undelete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoice.getId());
        return invoice.getId();
    }
    
    /**
     * Returns a list of invoice summaries. Results are ordered by descending invoice_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-invoices}
     * 
     * @param sourceToken source token value
     * @param invoiceRequest {@link InvoiceRequest} InvoiceRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Invoices
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Invoice> listInvoices(@Optional String sourceToken, 
            @Optional @Default("#[payload]") InvoiceRequest invoiceRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.<Invoice>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.INVOICE, invoiceRequest);
    }
    
    /**
     * <p>Create a new item and return the corresponding item_id. </p>
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-item}
     * 
     * @param sourceToken source token value
     * @param item to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created item
     * @throws FreshbooksException
     */
    @Processor
    public Item createItem(@Optional String sourceToken, @Optional @Default("#[payload]") Item item,
            @Optional String accessTokenId)
    {
        String newItemId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ITEM, item, true);
        item.setId(newItemId);
        return item;
    }
    
    /**
     * <p>Update an existing item. All fields aside from the item_id are optional; 
     * by omitting a field, the existing value will remain unchanged. </p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-item}
     * 
     * @param sourceToken source token value
     * @param item to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated item
     * @throws FreshbooksException
     */
    @Processor 
    public Item updateItem(@Optional String sourceToken, @Optional @Default("#[payload]") Item item,
            @Optional String accessTokenId)
    {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ITEM, item, true);
        return item;
    }
    
    /**
     * <p>Get an existing item with the given item_id. </p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-item}
     * 
     * @param sourceToken source token value
     * @param itemId    The item id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The item retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Item getItem(@Optional String sourceToken, String itemId,
            @Optional String accessTokenId)
    {
        return (Item) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ITEM, itemId);
    }
    
    /**
     * Delete an existing item.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-item}
     * 
     * @param sourceToken source token value
     * @param item to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteItem(@Optional String sourceToken, @Optional @Default("#[payload]") Item item,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ITEM, item.getId());
    }
    
    /**
     * Returns a list of items, ordered by descending item_id. 
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-items}
     * 
     * @param sourceToken source token value
     * @param itemRequest {@link ItemRequest} ItemRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Items
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Item> listItems(@Optional String sourceToken, 
            @Optional @Default("#[payload]") ItemRequest itemRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.<Item>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ITEM, itemRequest);
    }
    
    /**
     * Create a new tax and returns the corresponding tax_id.
     * <p>*Tax “name” must be unique. You may not create more than one tax with the same name.</p> 
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-tax}
     * 
     * @param sourceToken source token value
     * @param tax to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created Tax
     * @throws FreshbooksException
     */
    @Processor
    public Tax createTax(@Optional String sourceToken, @Optional @Default("#[payload]") Tax tax,
            @Optional String accessTokenId)
    {
        String newTaxId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TAX, tax, true);
        tax.setId(newTaxId);
        return tax;
    }
    
    /**
     * <p>Update an existing tax. All fields aside from the tax_id are optional; 
     * by omitting a field, the existing value will remain unchanged.</p> 
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-tax}
     * 
     * @param sourceToken source token value
     * @param tax to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated Tax
     * @throws FreshbooksException
     */
    @Processor 
    public Tax updateTax(@Optional String sourceToken, @Optional @Default("#[payload]") Tax tax,
            @Optional String accessTokenId)
    {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TAX, tax, true);
        return tax;
    }
    
    /**
     * <p>Retrieve tax details according to tax_id. </p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-tax}
     * 
     * @param sourceToken source token value
     * @param taxId     The tax id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The tax retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Tax getTax(@Optional String sourceToken, String taxId,
            @Optional String accessTokenId)
    {
        return (Tax) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TAX, taxId);
    }
    
    /**
     * Permanently delete a tax.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-tax}
     * 
     * @param sourceToken source token value
     * @param tax to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteTax(@Optional String sourceToken, @Optional @Default("#[payload]") Tax tax,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TAX, tax.getId());
    }
    
    /**
     * Returns a list of taxs, ordered by descending tax_id. 
     * <p>Filters: Use a “compound” tag to return only compound or non-compound taxes.</p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-taxes}
     * 
     * @param sourceToken source token value
     * @param taxRequest {@link TaxRequest} TaxRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Taxes
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Tax> listTaxes(@Optional String sourceToken, 
            @Optional @Default("#[payload]") TaxRequest taxRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.<Tax>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TAX, taxRequest);
    }
    
    /**
     * Create a new task and returns the corresponding task_id.
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-task}
     * 
     * @param sourceToken source token value
     * @param task to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created Task
     * @throws FreshbooksException
     */
    @Processor
    public Task createTask(@Optional String sourceToken, @Optional @Default("#[payload]") Task task,
            @Optional String accessTokenId)
    {
        String newPaymentId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TASK, task, true);
        task.setId(newPaymentId);
        return task;
    }
    
    /**
     * <p>Update an existing task.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-task}
     * 
     * @param sourceToken source token value
     * @param task to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated Task
     * @throws FreshbooksException
     */
    @Processor 
    public Task updateTask(@Optional String sourceToken, @Optional @Default("#[payload]") Task task,
            @Optional String accessTokenId)
    {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TASK, task, true);
        return task;
    }
    
    /**
     * <p>Retrieve an existing task. </p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-task}
     * 
     * @param sourceToken source token value
     * @param taskId     The task id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The task retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Task getTask(@Optional String sourceToken, String taskId,
            @Optional String accessTokenId)
    {
        return (Task) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TASK, taskId);
    }
    
    /**
     * Permanently delete a task.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-task}
     * 
     * @param sourceToken source token value
     * @param task to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteTask(@Optional String sourceToken, @Optional @Default("#[payload]") Task task,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TASK, task.getId());
    }
    
    /**
     * Returns a list of tasks summaries.
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-tasks}
     * 
     * @param sourceToken source token value
     * @param taskRequest {@link TaskRequest} TaskRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Tasks
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Task> listTasks(@Optional String sourceToken, 
            @Optional @Default("#[payload]") TaskRequest taskRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.<Task>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.TASK, taskRequest);
    }
    
    /**
     * Create a new payment and returns the corresponding payment_id.
     * <p>This function can have one of three possible effects depending on the presence of invoice_id and client_id:</p>
     * <p> * If you specify an invoice_id only, the payment will be recorded as an invoice payment.</p>
     * <p> * If you specify a client_id only, the payment will be recorded as a client credit.</p>
     * <p> * If you specify both an invoice_id and client_id, the payment will be recorded as an invoice payment, 
     * and the amount will be subtracted from the client's credit.</p>
     * <p>Note that 'currency_code' can only be provided when creating a credit, not a regular payment. Regular payments 
     * will default to the currency code of the invoice they are being made against.</p> 
     *  
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-payment}
     * 
     * @param sourceToken source token value
     * @param payment to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The created Payment
     * @throws FreshbooksException
     */
    @Processor
    public Payment createPayment(@Optional String sourceToken, @Optional @Default("#[payload]") Payment payment,
            @Optional String accessTokenId)
    {
        String newPaymentId = (String) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.PAYMENT, payment, true);
        payment.setId(newPaymentId);
        return payment;
    }
    
    /**
     * <p>Update an existing payment. All fields besides payment_id are optional - unpassed 
     * fields will retain their existing value.</p>
     * <p>Note that 'currency_code' can only be provided when updating a credit, not a regular payment. 
     * Regular payments will default to the currency code of the invoice they are being made against.</p> 
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:update-payment}
     * 
     * @param sourceToken source token value
     * @param payment to be updated
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return updated Payment
     * @throws FreshbooksException
     */
    @Processor 
    public Payment updatePayment(@Optional String sourceToken, @Optional @Default("#[payload]") Payment payment,
            @Optional String accessTokenId)
    {
        freshbooksClient.update(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.PAYMENT, payment, true);
        return payment;
    }
    
    /**
     * <p>Retrieve payment details according to payment_id. </p>
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-payment}
     * 
     * @param sourceToken source token value
     * @param paymentId     The payment id
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return The payment retrieved.
     * @throws FreshbooksException.
     */
    @Processor
    public Payment getPayment(@Optional String sourceToken, String paymentId,
            @Optional String accessTokenId)
    {
        return (Payment) freshbooksClient.get(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.PAYMENT, paymentId);
    }
    
    /**
     * Permanently delete a payment. This will modify the status of the associated invoice if required.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-payment}
     * 
     * @param sourceToken source token value
     * @param payment to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deletePayment(@Optional String sourceToken, @Optional @Default("#[payload]") Payment payment,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.PAYMENT, payment.getId());
    }
    
    /**
     * Returns a list of payment summaries. Results are ordered by descending payment_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-payments}
     * 
     * @param sourceToken source token value
     * @param paymentRequest {@link PaymentRequest} PaymentRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Payments
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Payment> listPayments(@Optional String sourceToken, 
            @Optional @Default("#[payload]") PaymentRequest paymentRequest,
            @Optional String accessTokenId)
    {
        return freshbooksClient.<Payment>list(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.PAYMENT, paymentRequest);
    }
    
    /**
     * Returns information about the current user
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-current-user-information}
     * 
     * @param sourceToken source token value
     * @param accessTokenId accessTokenIdentifier
     * @param credentials provided by the app when the credentials are not stored yet
     * @return current user information
     * @throws FreshbooksException.
     */
    @Processor
    public Staff getCurrentUserInformation(@Optional String sourceToken,
            @Optional String accessTokenId, @Optional OAuthCredentials credentials)
    {
        //When the credentials are stored
        if (StringUtils.isNotBlank(accessTokenId)) {
            credentials = getAccessTokenInformation(accessTokenId);
        }
        
        return (Staff) freshbooksClient.execute(credentials, sourceToken, EntityType.STAFF, "staff.current");
    }
    
    /**
     * Create a session
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-session}
     * 
     * @param sourceToken source token value
     * @param session the session to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return created session information
     * @throws FreshbooksException.
     */
    @Processor
    public Session createSession(@Optional String sourceToken, @Optional @Default("#[payload]") Session session,
            @Optional String accessTokenId)
    {
        return (Session) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.SESSION, session, false);
    }
    
    /**
     * Create a license
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-license}
     * 
     * @param sourceToken source token value
     * @param license the license to be created
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return created license information
     * @throws FreshbooksException.
     */
    @Processor
    public License createLicense(@Optional String sourceToken, @Optional @Default("#[payload]") License license,
            @Optional String accessTokenId)
    {
        return (License) freshbooksClient.create(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.LICENSE, license, false);
    }
    
    /**
     * Returns a list of licenses summaries. Results are ordered by descending license_id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-licenses}
     * 
     * @param sourceToken source token value
     * @param licenseRequest {@link LicenseRequest} LicenseRequest object
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Licenses
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<License> listLicenses(@Optional String sourceToken, 
            @Optional @Default("#[payload]") LicenseRequest licenseRequest,
            @Optional String accessTokenId)
    {
        return ((Licenses) freshbooksClient.getListObject(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.LICENSE, licenseRequest)).getLicenses();
    }
    
    /**
     * Permanently delete a license.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:delete-license}
     * 
     * @param sourceToken source token value
     * @param license to be deleted
     * @param accessTokenId accessTokenIdentifier
     * 
     * @throws FreshbooksException.
     */
    @Processor
    public void deleteLicense(@Optional String sourceToken, @Optional @Default("#[payload]") License license,
            @Optional String accessTokenId)
    {
        freshbooksClient.delete(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.LICENSE, license.getId());
    }
    
    /**
     * Returns a list of addons summaries. Results are ordered by descending id.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:list-addons}
     * 
     * @param sourceToken source token value
     * @param accessTokenId accessTokenIdentifier
     * 
     * @return A iterable of Addons
     * @throws FreshbooksException.
     */
    @Processor
    public Iterable<Addon> listAddons(@Optional String sourceToken,
            @Optional String accessTokenId)
    {
        return ((Addons) freshbooksClient.getListObject(getAccessTokenInformation(accessTokenId), 
                sourceToken, EntityType.ADDON, new AddonRequest())).getAddons();
    }

    /**
     * Create a system user. You don't need to be authenticated to call this processor.
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:create-system-user}
     * 
     * @param sourceToken source token value
     * @param systemUser the system user to be created
     * @param userIdentifier identifier to be used for storing the accessToken
     * 
     * @return created system user
     * @throws ObjectStoreException in case of failure storing the accessToken information
     */
    @Processor
    public System createSystemUser(@Optional String sourceToken, @Optional @Default("#[payload]") System systemUser, 
            @Optional String userIdentifier) throws ObjectStoreException
    {
        System newSystem = (System) freshbooksClient.create(createCredentials("", ""), 
                sourceToken, EntityType.SYSTEM, systemUser, false);
        systemUser.setDomain(newSystem.getDomain());
        
        if (StringUtils.isNotBlank(newSystem.getAccessToken())) {
            systemUser.setAccessToken(newSystem.getAccessToken());
            systemUser.setAccessTokenSecret(newSystem.getAccessTokenSecret());
            
            OAuthCredentials credentials = new OAuthCredentials(systemUser.getAccessToken(), systemUser.getAccessTokenSecret());
            credentials.setApiUrl(String.format(DEFAULT_API_URL, systemUser.getDomain()));
            
            //if an userIdentifier is not provided call the current.user API
            if (StringUtils.isBlank(userIdentifier)) {
                userIdentifier = newSystem.getUsername();
            }

            getObjectStoreHelper().store(userIdentifier, credentials, true);                        
        }
        
        return systemUser;
    }
    
    /**
     * Authorize an user using OAuth1.0a
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-access-token}
     * 
     * @param requestTokenUrl requestTokenUrl
     * @param accessTokenUrl accessTokenUrl
     * @param authorizationUrl authorizationUrl
     * @param callbackUrl callbackUrl for OAuth service
     * @param requestTokenId Optional value for identifying the requestToken. If it is not passed the client will use a UUID
     * @param headers Outbound headers
     * @return Authorize Url
     * @throws ObjectStoreException from the Object Store instance
     * @throws OAuthCommunicationException requesting to OAuth provider
     * @throws OAuthExpectationFailedException requesting to OAuth provider
     * @throws OAuthNotAuthorizedException requesting to OAuth provider
     * @throws OAuthMessageSignerException requesting to OAuth provider
     */
    @Processor
    public String authUser(String requestTokenUrl, String accessTokenUrl, String authorizationUrl, String callbackUrl, 
            @Optional String requestTokenId, @OutboundHeaders Map<String, Object> headers) 
                    throws OAuthMessageSignerException, OAuthNotAuthorizedException, 
                    OAuthExpectationFailedException, OAuthCommunicationException, ObjectStoreException
    {
        String authUrl = new DefaultFreshbooksOAuthClient(getConsumerKey(), getConsumerSecret(), getObjectStore()).
                authorize(requestTokenUrl, accessTokenUrl, authorizationUrl, callbackUrl, requestTokenId);
        
        headers.put("Location", authUrl);
        headers.put("http.status", "302");
        return authUrl;
    }
    
    /**
     * Extract accessToken
     * 
     * {@sample.xml ../../../doc/mule-module-freshbooks.xml.sample freshbooks:get-access-token}
     * 
     * @param apiUrl API URL
     * @param verifier OAuth verifier. It comes within the callback.
     * The default value is "#[header:inbound:oauth_verifier]"
     * @param requestTokenId id used for identifying the authorized request token. It comes within the callback.
     * By default the query string parameter is userId
     * @param userIdentifier id used for store the accessToken in the Object Store. 
     *      If it is not provided by the app the connector uses the username from FreshBooks
     * @return credentials user credentials
     * @throws ObjectStoreException from the object store instance
     * @throws OAuthCommunicationException requesting to OAuth provider
     * @throws OAuthExpectationFailedException requesting to OAuth provider
     * @throws OAuthNotAuthorizedException requesting to OAuth provider
     * @throws OAuthMessageSignerException requesting to OAuth provider
     */
    @Processor
    public OAuthCredentials getAccessToken(@Optional String apiUrl, @Optional @Default("#[header:inbound:oauth_verifier]") String verifier, 
            @Optional @Default("#[header:inbound:userId]") String requestTokenId, @Optional String userIdentifier)
                    throws OAuthMessageSignerException, OAuthNotAuthorizedException, 
                    OAuthExpectationFailedException, OAuthCommunicationException, ObjectStoreException
    {
        OAuthCredentials credentials = new DefaultFreshbooksOAuthClient(getConsumerKey(), getConsumerSecret(), 
                getObjectStore()).getAccessToken(verifier, requestTokenId);
        
        if (StringUtils.isNotBlank(apiUrl)) {
            credentials.setApiUrl(apiUrl);
        }

        //Stores user credentials
        if (StringUtils.isBlank(userIdentifier)) {
            userIdentifier = getCurrentUserInformation(null, null, credentials).getUsername();
        }
        
        credentials.setUserId(userIdentifier);
        getObjectStoreHelper().store(userIdentifier, credentials, true);

        return credentials;
    }

    /**
     * This method retrieves the accessTokenInformation from the object store instance
     * @return OAuthCredentials AuthToken and AuthTokenSecret
     */
    private OAuthCredentials getAccessTokenInformation(String accessTokenIdentifier) {
        try {
            return (OAuthCredentials) objectStoreHelper.retrieve(accessTokenIdentifier);
        } catch (ObjectDoesNotExistException e) {
            throw new FreshbooksAccessTokenException("The user token could not be retrieved from the Object Store");
        } catch (ObjectStoreException e) {
            throw new FreshbooksAccessTokenException("The user token could not be retrieved");
        }
    }
    
    /**
     * Create OAuthCredentials object
     * @param accessToken
     * @param accessTokenSecret
     * @return credentials
     */
    private OAuthCredentials createCredentials(String accessToken, String accessTokenSecret) {
        return new OAuthCredentials(accessToken, accessTokenSecret);
    }

    public String getApiKey() {
        return consumerKey;
    }

    public String getApiSecret() {
        return consumerSecret;
    }

    public void setConsumerKey(String consumerKey) {
        this.consumerKey = consumerKey;
    }

    public void setConsumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
    }

    public FreshbooksClient getFreshbooksClient() {
        return freshbooksClient;
    }

    public void setFreshbooksClient(FreshbooksClient freshbooksClient) {
        this.freshbooksClient = freshbooksClient;
    }

    public String getConsumerKey() {
        return consumerKey;
    }

    public String getConsumerSecret() {
        return consumerSecret;
    }

    public ObjectStore getObjectStore() {
        return objectStore;
    }

    public void setObjectStore(ObjectStore objectStore) {
        this.objectStore = objectStore;
    }

    public ObjectStoreHelper getObjectStoreHelper() {
        return objectStoreHelper;
    }

    public void setObjectStoreHelper(ObjectStoreHelper objectStoreHelper) {
        this.objectStoreHelper = objectStoreHelper;
    }
}
